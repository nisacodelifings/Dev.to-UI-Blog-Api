{"version":3,"sources":["screens/homeScreen.js","action/homeAction.js","constants/banner.js","screens/articleScreen.js","App.js","serviceWorker.js","store.js","reducers/homeScreenReducer.js","index.js"],"names":["useStyles","makeStyles","theme","root","display","marginLeft","HomeScreen","props","articleList","useSelector","state","articles","loading","error","dispatch","useDispatch","useEffect","a","type","axios","get","data","payload","message","className","CircularProgress","color","map","article","key","id","to","title","readable_publish_date","comments_count","positive_reactions_count","tag_list","ArticleScreen","articleDetails","articleId","match","params","src","cover_image","source","body_markdown","App","href","target","path","exact","component","Boolean","window","location","hostname","reducer","combineReducers","action","composeEnhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.c95895d0.chunk.js","sourcesContent":["import React,{useEffect} from 'react'\nimport {listArticles} from '../action/homeAction';\nimport {useSelector , useDispatch} from 'react-redux';\nimport {Link} from 'react-router-dom';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst useStyles = makeStyles((theme) => ({\n        root: {\n         \n          display: 'flex',\n          '& > * + *': {\n            marginLeft: '50px',\n          },\n        },\n      }));\n\n\nexport default function HomeScreen(props) {\n   \n    \n   \n    const articleList = useSelector(state => state.articleList);\n    const {articles, loading, error}= articleList;\n\n    const dispatch = useDispatch();\n    const classes = useStyles();\n\n\n    useEffect (()=>{\n        dispatch(listArticles())\n\n            return()=>{\n\n           }\n    }, [])\n\n\n    return loading? <div className=\"loading\" ><CircularProgress color=\"secondary\" /></div>:\n    error? <div>{error}</div>:\n    <ul className=\"articles\">\n       <div className=\"box\"> {\n            \n            articles.map(article =>\n               \n                <li key={article.id}>\n\n                    <div className=\"main-box\">\n                    <div className=\"article-title\">\n\n            <Link className=\"title\" to ={'/api/articles/' + article.id}>{article.title}</Link>\n                    </div>\n\n            <div className=\"article-date\">{article.readable_publish_date}</div>\n            <div className=\"article-comments\">{article.comments_count}</div>\n            <div className=\"article-reactions\">{article.positive_reactions_count}</div>\n            \n\n            \n            <div className=\"article-tags\">Tags: #{article.tag_list[0]},  #{article.tag_list[1]}, #{article.tag_list[2]}</div>\n            </div></li>\n\n                )\n        }</div>\n    </ul>\n}\n","\n\nimport axios from 'axios';\nimport { ARTICLE_LIST_REQUEST, ARTICLE_LIST_SUCCESS, ARTICLE_LIST_FAIL, ARTICLE_DETAILS_REQUEST, ARTICLE_DETAILS_SUCCESS, ARTICLE_DETAILS_FAIL  } from '../constants/banner';\n\nconst listArticles =()=> async(dispatch)=>{\n\n\n    try{\n        dispatch({type: ARTICLE_LIST_REQUEST});\n        const {data}= await axios.get('https://dev.to/api/articles?username=hemant')\n        dispatch({type:ARTICLE_LIST_SUCCESS, payload: data})\n    }\n    catch(error){\n        dispatch({type:ARTICLE_LIST_FAIL, payload:error.message})\n\n    }\n}\n\n\n\nconst detailsArticle = (articleId)=> async(dispatch)=>{\n\n    try{\n\n        dispatch({type:ARTICLE_DETAILS_REQUEST, payload:articleId})\n        const {data}=await axios.get(\"https://dev.to/api/articles/\"+ articleId)\n        dispatch({type:ARTICLE_DETAILS_SUCCESS, payload:data})\n    }catch(error){\n        dispatch({type:ARTICLE_DETAILS_FAIL, payload:error.message})\n\n    }\n}\n\nexport {listArticles, detailsArticle}","export const ARTICLE_LIST_REQUEST = 'ARTICLE_LIST_REQUEST'\nexport const ARTICLE_LIST_SUCCESS ='ARTICLE_LIST_SUCCESS'\nexport const ARTICLE_LIST_FAIL = 'ARTICLE_LIST_FAIL'\n\nexport const ARTICLE_DETAILS_REQUEST = 'ARTICLE_DETAILS_REQUEST'\nexport const ARTICLE_DETAILS_SUCCESS = 'ARTICLE_DETAILS_SUCCESS'\nexport const ARTICLE_DETAILS_FAIL = 'ARTICLE_DETAILS_FAIL'","import React, { useEffect} from 'react'\nimport {detailsArticle} from '../action/homeAction'\nimport { Link } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport ReactMarkdown from 'react-markdown'\n\n\nfunction ArticleScreen(props){\n\n    const articleDetails = useSelector(state=>state.articleDetails)\n    const {articles, loading, error} = articleDetails\n\n    const dispatch = useDispatch();\n\n    useEffect(()=>{\n        dispatch(detailsArticle(props.match.params.id))\n\n        return()=>{\n\n        }\n    },[])\n\n\n    return <div>\n            {loading? <div>Loading..</div>:\n            error? <div>{error}</div>:\n            (\n                <div className='box'>\n                    <div className=\"cover-image\">\n                        <img src={articles.cover_image} />\n                         </div>\n\n                    {/* <div className=\"reactions\">\n                     {articles.public_reaction_count}\n                     {articles.comments_count}\n                    </div> */}\n                   \n                <div className=\"main\">\n                   <ul>\n                    <li className=\"title-article\" >\n                        <h2>\n                            {articles.title}\n                        </h2>\n                    </li>\n\n\n\n                   </ul>\n                   \n                    </div>\n\n                    <div className=\"body\">\n                        <ReactMarkdown source={articles.body_markdown} />\n                    </div>\n\n\n                    <div className=\"about-the-author\">\n\n                        {/* {articles.user} */}\n                    </div>\n\n\n                    </div>\n            )}\n\n\n\n    </div>\n}\n\nexport default ArticleScreen;","import React from 'react';\nimport './App.css';\nimport { Link, BrowserRouter, Route } from 'react-router-dom'\n\nimport HomeScreen from './screens/homeScreen'\nimport ArticleScreen from './screens/articleScreen';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n    \n    <div className=\"grid-container\">\n\n    <header className=\"header\">\n      <div className=\"name\">\n        <Link to =\"/\" >Hemant</Link>\n      </div>\n\n      <div className=\"header-links\"> \n\n      <a className=\"social-link\" href=\"https://github.com/8bithemant\" target=\"_blank\">Github</a>\n     \n      </div>\n    </header>\n\n\n    <main className=\"main\">\n      <div className=\"content\">\n        <Route path ='/' exact={true} component={HomeScreen}/>\n        <Route path='/api/articles/:id' component={ArticleScreen} />\n      </div>\n    </main>\n\n    <footer className=\"footer\">\n     <div className=\"footer-main\">  Designed By Hemant; </div> \n    </footer>\n\n\n\n\n\n    </div>\n    \n    </BrowserRouter>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {createStore, combineReducers, compose, applyMiddleware} from 'redux'\nimport thunk from 'redux-thunk'\nimport {articleListReducer, articleDetailsReducer} from './reducers/homeScreenReducer'\n\nconst reducer= combineReducers({\n\n    articleList: articleListReducer,\n    articleDetails: articleDetailsReducer\n})\n\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\nconst store = createStore(reducer,  composeEnhancer(applyMiddleware(thunk)) );\n\nexport default store;","import { ARTICLE_LIST_SUCCESS, ARTICLE_LIST_REQUEST, ARTICLE_LIST_FAIL,ARTICLE_DETAILS_REQUEST,ARTICLE_DETAILS_SUCCESS, ARTICLE_DETAILS_FAIL } from '../constants/banner'\n\n\n\nfunction articleListReducer(state={articles:[]}, action){\n\n\n    switch(action.type){\n      case ARTICLE_LIST_REQUEST:\n          return {loading: true}\n      case ARTICLE_LIST_SUCCESS:\n          return {loading: false, articles: action.payload}\n      case ARTICLE_LIST_FAIL:\n          return {loading: false, error:action.payload}\n      default:\n          return state\n    }\n}\n\n\n\nfunction articleDetailsReducer(state={articles:[]}, action){\n\n\n    switch(action.type){\n      case ARTICLE_DETAILS_REQUEST:\n          return {loading: true}\n      case ARTICLE_DETAILS_SUCCESS:\n          return {loading: false, articles: action.payload}\n      case ARTICLE_DETAILS_FAIL:\n          return {loading: false, error:action.payload}\n      default:\n          return state\n    }\n}\n\n\n\n\n\nexport {articleListReducer, articleDetailsReducer}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store'\nimport {Provider} from 'react-redux'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}